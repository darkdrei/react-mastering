{"version":3,"sources":["reportWebVitals.js","components/category/AddCategory.js","helpers/getGifs.js","components/category/GifItem.js","components/category/GitGrid.js","hooks/useFetchGifs.js","components/gitexpertapp/GitExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","alt","GitGrid","loading","state","setState","useEffect","imgs","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,mCCHDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACI,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OACZC,MAAQT,EACRU,SAfmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,8FACgFC,UAAWH,GAD3F,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QARxB,kBAWZM,GAXY,4CAAH,sDCCPO,EAAU,SAAC,GAA0B,IAAvBH,EAAsB,EAAtBA,MAAWV,GAAW,EAAfS,GAAe,EAAXT,KAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCAJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECJb,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAsBvC,OAfAC,qBAAW,WACPxB,EAAQC,GACRtB,MAAK,SAAA8C,GACDF,EAAS,CACLf,KAAMiB,EACNJ,SAAS,SAIlB,CAACpB,IAMGqB,EDjB0BI,CAAczB,GAAvCoB,EAD6B,EAC7BA,QAAcP,EADe,EACpBN,KAqBjB,OACI,qCACI,6BAAMP,IACJoB,GAAW,mBAAGJ,UAAU,wCAAb,yBACZ,sBAAKA,UAAU,YAAf,UACG,6BAAOhB,IACP,6BAGQa,EAAOJ,KAAI,SAAAC,GAAG,OAAI,wBAAC,EAAD,2BAAcA,GAAd,IAAoBgB,IAAMhB,EAAIC,kBEDzDgB,EA7BM,WAAK,MAGczC,mBAAS,CAAC,cAHxB,mBAGf0C,EAHe,KAGH3C,EAHG,KAWtB,OACI,gCACI,8CAGA,uBACA,cAAC,EAAD,CAAaA,cAAiBA,IAE9B,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OAAc,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCvBhE6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAG1BzD,K","file":"static/js/main.014c620e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n     const handleInputChange = (e) =>{\n        setInputValue(e.target.value);\n     }\n     const handleSubmit = (e)=>{\n        e.preventDefault();\n        if( inputValue.trim().length > 2){\n            setCategories( cats =>[inputValue, ...cats] );\n            setInputValue(\"\");\n        }\n     }\n\n    return (\n        <form onSubmit={ handleSubmit }> \n            <input type='text' \n            value={ inputValue } \n            onChange = { handleInputChange }/>\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async( category ) =>{\n    const url =`https://api.giphy.com/v1/stickers/search?api_key=H0ok826wF6Rg2wwNIGVTQLKfdQpyD6rJ&q=${ encodeURI( category ) }&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url : img.images?.downsized_medium.url,\n        }\n    } )\n    return gifs;\n}","import React from 'react'\n\nexport const GifItem = ( { title, id, url } ) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title }></img>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useFetchGifs } from '../../hooks/useFetchGifs'\nimport { GifItem } from './GifItem'\nimport '../../index.css'\n//import { getGifs } from '../../helpers/getGifs'\n\nexport const GitGrid = ({ category }) => {\n    const { loading, data:images } = useFetchGifs( category );\n    /*const [images, setImages] =useState([]);\n\n    useEffect(()=> {\n        getGifs( category ).then( setImages );\n    }, [ category]);*/\n\n    /*const getGifs = async() =>{\n        const url =`https://api.giphy.com/v1/stickers/search?api_key=H0ok826wF6Rg2wwNIGVTQLKfdQpyD6rJ&q=${ encodeURI( category ) }&limit=10`;\n        const resp = await fetch(url);\n        const { data } = await resp.json();\n        const gifs = data.map(img =>{\n            return {\n                id: img.id,\n                title: img.title,\n                url : img.images?.downsized_medium.url,\n            }\n        } )\n        setImages(gifs);\n    }*/\n\n    return (\n        <>\n            <h3>{ category }</h3>\n            { loading && <p className='card animate__animated animate__flash'>Cargando...</p> }\n            {<div className='card-grid'>\n                <h3 >{ category }</h3>\n                <ol>\n         \n                    {\n                        images.map(img => <GifItem { ...img } key={ img.id }/>)\n                    }\n                </ol>\n            </div> \n            }\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nexport const useFetchGifs = ( category ) =>{\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category).\n        then(imgs =>{\n            setState({\n                data: imgs,\n                loading: false,\n            });\n            \n        })\n    }, [category]);\n\n    /*setTimeout(() => {\n        setState({data:[1,2,3], loading:false})\n    },3000);*/\n\n    return state;\n}","import React, { useState } from 'react';\nimport './gitexpertapp.css'\nimport '../../index.css'\nimport { AddCategory } from '../category/AddCategory'\nimport { GitGrid } from '../category/GitGrid'\n\n\nconst GitExpertApp = () =>{\n\n    //const categories = ['One punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['One punch'])\n\n    /*const handleAdd = (event) =>{\n       // setCategories([...categories, 'Hola mundo']);\n        // Esta es una forma de manejar un callback\n        setCategories(catgs =>[...catgs, 'Hola mundo']);\n    }*/\n\n    return(\n        <div>\n            <h2>\n            GitExpertApp\n            </h2>\n            <hr></hr>\n            <AddCategory setCategories= { setCategories }/>\n            {/*<button onClick={ handleAdd }>Agregar</button>*/}\n            <ol>\n                {\n                    categories.map((category) => <GitGrid key={ category } category={ category }/>)\n                }\n            </ol>\n            \n        </div>\n    )\n}\n\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport  GitExpertApp from './components/gitexpertapp/GitExpertApp'\n\nReactDOM.render(\n\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}